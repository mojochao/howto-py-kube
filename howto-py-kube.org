#+TITLE: HOWTO Run Python in Kubernetes
#+AUTHOR: Allen Gooch
#+EMAIL: allen.gooch@gmail.com
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LANGUAGE: en
#+STARTUP: overview

* Overview
  
 This document is a guide to running [[https://www.python.org/][Python]] apps packaged as [[https://www.docker.com/what-docker][Docker]] images in a
 [[https://kubernetes.io/][Kubernetes]] environment with deployments described by Kubernetes [[https://github.com/kubernetes/charts][Charts]] managed
 by [[https://github.com/kubernetes/helm][Helm]].  That's a lot of stack to cover.

 This guide is intended to demo:
 - installing of all Docker and Kubernetes tools required
 - creating demo web service source
 - building and running demo web service image in docker engine
 - building, running, and scaling demo web service app in minikube cluster
 - updating demo web service source and rolling out to minikube cluster
 - describing demo web service app delaratively with kubernetes charts
 - running demo web service app chart deployments with helm

 Note that this guide demos commands on macOS, but is still valid for other 
 operating systems, apart from the macOS tools installation instructions.

* Usage

 Open up a terminal for the demo.  Everything we do will be done in a shell.
 I personally use [[http://www.zsh.org/][zsh]] with [[https://github.com/sorin-ionescu/prezto][prezto]] but vanilla bash will perform just as well.

 The first thing to do is clone this repository.

#+BEGIN_SRC sh
git clone https://github.com/mojochao/howto-py-kube.git
#+END_SRC

 Open this document in your editor of choice.  Mine is [[http://spacemacs.org/][spacemacs]], a community
 curated configuration of the [[https://www.gnu.org/software/emacs/][Emacs]] editor, with the [[http://spacemacs.org/layers/+emacs/org/README.html][Org layer]] added to my
 [[https://github.com/mojochao/dotfiles/blob/master/src/.spacemacs][.spacemacs]] config file. 

 This document is an example of [[http://howardism.org/Technical/Emacs/literate-devops.html][Literate DevOps]], a term coined by the awesome 
 emacs hacker [[http://www.howardism.org/][Howard Abrams]]. 

 Emacs [[https://orgmode.org][Org mode]] provides capabilities for interactively using this document 
 /The Right Way (tm)/.  After opening this file in emacs, type =C-c C-c= in a 
 source block to execute the source.

 For those not down with [[http://www.howardism.org/Technical/Emacs/tao-of-emacs.html][The Tao of Emacs]] you will have to manually enter the 
 demonstrated commands in a shell session.

 [[https://orgmode.org][Org mode]] also provides the ability to extract document source blocks into 
 scripts.

#+BEGIN_SRC elisp :results output
(make-directory "scripts" t)
(org-babel-tangle-file "howto-py-kube.org")
#+END_SRC

 Once generated, these scripts can be used to perform the commands demonstrated
 in this document.

 [[https://orgmode.org][Org mode]] also provides the ability to export documents in multiple formats.

 The most commonly used is HTML.

#+BEGIN_SRC elisp
(org-html-export-to-html "howto-py-kube.org")
#+END_SRC

 Another commonly used format is PDF.

#+BEGIN_SRC elisp
(org-latex-export-to-pdf "howto-py-kube.org")
#+END_SRC

 If not viewing in emacs, you can also use the HTML rendered version on its 
 [[https://github.com/mojochao/howto-py-kube][GitHub project]] page. 

* Install Prerequisites
  
 Note that [[https://brew.sh/][Homebrew]] is used for installing packages on macOS.  Ensure it is
 installed before proceeding.

 A [[https://www.docker.com/docker][Docker]] environment is used to run images in containers. Ensure it is 
 installed.  

#+BEGIN_SRC sh :tangle scripts/install_prereqs.sh
which docker || brew cask install docker
#+END_SRC

 After install, =Docker.app= will be running and you will see the Docker Whale 
 icon in your Menu Bar.
  
 It is not required to have the =Docker.app= application running, as minikube
 will run the docker machine itself.  Feel free to quit =Docker.app= at any 
 time.

 The [[https://kubernetes.io/docs/reference/kubectl/overview][kubectl]] command is used to manage the Kubernetes cluster at the lowest
 level.  Ensure it is installed.

#+BEGIN_SRC sh :tangle scripts/install_prereqs.sh
which kubectl || brew install kubectl
#+END_SRC

 The [[https://docs.helm.sh/helm][helm]] command is used to manage deployments to the Kubernetes cluster at a
 high level.  Ensure it is installed.

#+BEGIN_SRC sh :tangle scripts/install_prereqs.sh
which helm || brew install kubernetes-helm
#+END_SRC

 [[https://kubernetes.io/docs/getting-started-guides/minikube/][Minikube]] is used to provide the local Kubernetes cluster.  Ensure it is 
 installed.

#+BEGIN_SRC sh :tangle scripts/install_prereqs.sh
which minikube || brew cask install minikube
#+END_SRC

 Minikube needs a VM driver for the host OS.  On macOS, [[https://github.com/kubernetes/minikube/blob/master/docs/drivers.md#hyperkit-driver][hyperkit]] is the 
 recommended driver.  Install it.

#+BEGIN_SRC sh :tangle scripts/install_prereqs.sh
curl -LO https://storage.googleapis.com/minikube/releases/latest/docker-machine-driver-hyperkit \
&& chmod +x docker-machine-driver-hyperkit \
&& sudo mv docker-machine-driver-hyperkit /usr/local/bin/ \
&& sudo chown root:wheel /usr/local/bin/docker-machine-driver-hyperkit \
&& sudo chmod u+s /usr/local/bin/docker-machine-driver-hyperkit
#+END_SRC

 If not using macOS, consult the [[https://github.com/kubernetes/minikube/blob/master/docs/drivers.md][driver plugin installation]] docs for options.

* Create the demo service

  We now need a workload to run on the cluster, so we are going to create a
  simple greet api web service to run.

  Start by creating a directory for the greet api app.

#+BEGIN_SRC sh :tangle scripts/create_app.sh :results none
mkdir greet-api
#+END_SRC

  Add the app source code.

#+BEGIN_SRC sh :tangle scripts/create_app.sh :results none
cat <<EOF > greet-api/app.py
import os
from bottle import route, run


@route('/')
def greet():
    host = os.uname()[1]
    return f'Hello World from {host}\n'


if __name__ == '__main__':
    host = '0.0.0.0'
    port = 8080
    print(f'starting greet-api web service on {host}:{port}')
    run(host=host, port=port, debug=True)
EOF
#+END_SRC

  Add a =requirements.txt= file for the app.

#+BEGIN_SRC sh :tangle scripts/create_app.sh :results none
cat <<EOF > greet-api/requirements.txt
bottle
EOF
#+END_SRC

  Add a =setup.py= file for the app.

#+BEGIN_SRC sh :tangle scripts/create_app.sh :results none
cat <<EOF > greet-api/setup.py
from setuptools import setup

with open('requirements.txt') as infile:
    requirements = [line.strip() for line in infile.readlines()]

setup(
    name='greet-api',
    version='1.0.0',
    description='a demo greet api web service',
    url='https://some.dot.com/path',
    author='Demo Dan',
    author_email='demo.dan@dantheman.com',
    py_modules=['app'],
    install_requires=requirements,
)
EOF
#+END_SRC

  Add a =README.rst= file for the app.  The setuptools package warns if a 
  README is not present.

#+BEGIN_SRC sh :tangle scripts/create_app.sh :results none
cat <<EOF > greet-api/README.rst
Greet API Service
=================
EOF
#+END_SRC

  Add a =Dockerfile= for the app.

#+BEGIN_SRC sh :tangle scripts/create_app.sh :results none
cat <<EOF > greet-api/Dockerfile
FROM python:3.6-alpine
EXPOSE 8080
COPY . /app
WORKDIR /app
RUN pip install --no-cache-dir .
ENTRYPOINT ["python", "app.py"]
EOF
#+END_SRC

  Add a =.dockerignore= file for the app.

#+BEGIN_SRC sh :tangle scripts/create_app.py :results none
cat <<EOF > greet-api/.dockerignore
.git
EOF
#+END_SRC

  Done!  That's all we need to provide the demo web service.

#+BEGIN_SRC sh :tangle scripts/create_app.sh :results verbatim raw
ls -a1 greet-api
#+END_SRC

  Check the project artifacts into git and create a tag for version one of the
  app.

#+BEGIN_SRC sh :tange scripts/create_app.sh :results verbatim raw
cd greet-api
git init
git add .
git commit -m 'Add initial greet-api app'
git tag 1.0.0
#+END_SRC

  And we're done.  No need to install the project into a virtualenv.  We don't
  even need to have Python installed locally.

* Build and run the demo service in docker

 Now that we have an app ready to build, let's do that.  Time to give it a name.
 Let's call this app =demo/greet-api= and the image name =demo/greet-api:v1=.

#+BEGIN_SRC sh :results verbatim raw
docker build -t demo/greet-api:1.0.0 greet-api/
#+END_SRC

 It will now be present in the images.

#+BEGIN_SRC sh :results verbatim raw
docker images
#+END_SRC

 Let's run the image in a docker container.

#+BEGIN_SRC sh :results none
docker run --name greet-container --rm -d -p 8080:8080 demo/greet-api:1.0.0
#+END_SRC

 It will now be present in the list of running containers.

#+BEGIN_SRC sh :results verbatim raw
docker ps
#+END_SRC

 Finally, let's test the service at the exposed port.

#+BEGIN_SRC sh :results verbatim raw
seq 1 10 | xargs -I{} curl -s localhost:8080
#+END_SRC

 It's alive!  

 We can run a shell inside the container to poke around.

#+BEGIN_SRC sh
docker exec -it greet-container sh
#+END_SRC

 Now that we've seen it works, kill it.

#+BEGIN_SRC sh :results none
docker kill $(docker ps -aqf "name=greet-container")
#+END_SRC

 It will no longer be present in the list of running containers.

#+BEGIN_SRC sh :results verbatim raw
docker ps
#+END_SRC

 Remove the build image as well.

#+BEGIN_SRC sh :results none
docker rmi demo/greet-api:1.0.0
#+END_SRC
 
 It will no longer be present in the images.

#+BEGIN_SRC sh :results verbatim raw
docker images
#+END_SRC

 Now you've seen the full lifecycle of a docker image and container.

* Build and run the demo service in minikube
 
 Start a minikube cluster with the hyperkit vm driver on macOS.

#+BEGIN_SRC sh :results verbatim raw
minikube start --vm-driver=hyperkit
#+END_SRC

 Query the minikube cluster status with the =minikube status= command.

#+BEGIN_SRC sh :results verbatim raw
minikube status
#+END_SRC

 The output indicates that the =kubectl= command has had its context set to the
 address of the minikube cluster.

 Use the =kubectl cluster-info= command to confirm this.

#+BEGIN_SRC sh :results verbatim raw
kubectl cluster-info
#+END_SRC

 Open the cluster dashboard.

#+BEGIN_SRC sh :results none
minikube dashboard
#+END_SRC

 Leave the dashboard open so we can easily observe changes to the cluster.

 Congratulations!  You're the owner of a brand new local kubernetes cluster.

 Building images for minikube means setting the docker engine to the one
 running inside the cluster.

 When you wish docker to use the minikube docker env, you can do this in a shell
 session.

#+BEGIN_SRC sh :results verbatim raw
eval $(minikube docker-env)
#+END_SRC

 When you no longer wish docker to use the minikube docker env, you can do 
 the same passing the =-u= option for uninstall.

#+BEGIN_SRC sh :results verbatim raw
eval $(minikube docker-env -u)
#+END_SRC

 Note that all =docker= commands below will demonstrate setting the minikube
 docker environment, as each source block is effectively a different shell
 session.  In practice, you would probably only do it at the beginning of your
 shell session.

 Let's use this knowledge to list the docker images in our cluster.

#+BEGIN_SRC sh :results verbatim raw
eval $(minikube docker-env) && docker images
#+END_SRC

 Now that we know how to configure docker to use minikube, we can buld our app
 image for the cluster.  Let's build it with the =1.0.0= tag as we did before
 in the local docker install.

#+BEGIN_SRC sh :results verbatim raw
eval $(minikube docker-env) && docker build -t demo/greet-api:1.0.0 greet-api/
#+END_SRC

 It should now show up in the docker images list for the cluster.

#+BEGIN_SRC sh :results verbatim raw
eval $(minikube docker-env) && docker images
#+END_SRC

 Let's run the image in the cluster.
 
#+BEGIN_SRC sh :results verbatim raw
kubectl run greet --image=demo/greet-api:1.0.0 --port=8080 --generator=run/v1
#+END_SRC

 The =--image= argument specifies the container image we want to run, and the
 =--port= option tells Kubernetes that our app is listening on port 8080.

 The =--generator= option is something that we will not typically use, as we
 will typically provide specs describing the Kubernetes resources we are using.
 This is just a shortcut for getting a workload running quickly.

 If you now look at your dashboard you will see a [[https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/][replication controller]] and a
 [[https://kubernetes.io/docs/concepts/workloads/pods/pod/][pod]] resource created.

 The created pod is not directly accessible to the outside world.  To enable 
 that we need to expose it as a load balanced service.

#+BEGIN_SRC sh :results verbatim raw
kubectl expose rc greet --type=LoadBalancer --name greet-http
#+END_SRC 

 If you look again at your dashboard you will see a [[https://kubernetes.io/docs/concepts/services-networking/service/][service]] resource created.

 Now we should be able to access it once we get its external IP address.

#+BEGIN_SRC sh :results verbatim raw
kubectl get svc 
#+END_SRC

 In a non-minikube cluster, the external IP address of the =greet-http= service
 would be displayed once established.  Notice that it says =<pending>=.  

 Since minikube is a single host, it doesn’t support LoadBalancer services, so
 the service will never get an external IP.  We can still access the service 
 through its external port, but we need to ask minikube for it.

#+BEGIN_SRC sh :results verbatim raw
minikube service greet-http --url
#+END_SRC

 Finally, let's test the service at the exposed port.

#+BEGIN_SRC sh :results verbatim raw
seq 1 10 | xargs -I{} curl -s $(minikube service greet-http --url)
#+END_SRC

 Time to scale this service.

#+BEGIN_SRC sh :results verbatim raw
kubectl scale rc greet --replicas=3
#+END_SRC

#+RESULTS:
replicationcontroller "greet" scaled

 And now we're scaled to two replicas.  Don't believe me?

#+BEGIN_SRC sh :results verbatim raw
seq 1 10 | xargs -I{} curl -s $(minikube service greet-http --url)
#+END_SRC

 Check your dashboard for further confirmation.

* Update the demo service
  
  Update the demo web service source code.

#+BEGIN_SRC sh :tangle scripts/update_app.sh :results none
cat <<EOF > greet-api/app.py
import os
from bottle import request, route, run


@route('/')
def greet():
    host = os.uname()[1]
    name = request.query.name or 'World'
    return f'Hello {name} from {host}\n'


if __name__ == '__main__':
    host = '0.0.0.0'
    port = 8080
    print(f'starting greet-api web service on {host}:{port}')
    run(host=host, port=port, debug=True)
EOF
#+END_SRC

  Now we can pass a query param to indicate the name of the entity to greet.

  Update the version in the =setup.py= file for the app.

#+BEGIN_SRC sh :tangle scripts/create_app.sh :results none
cat <<EOF > greet-api/setup.py
from setuptools import setup

with open('requirements.txt') as infile:
    requirements = [line.strip() for line in infile.readlines()]

setup(
    name='greet-api',
    version='1.1.0',
    description='a demo greet api web service',
    url='https://some.dot.com/path',
    author='Demo Dan',
    author_email='demo.dan@dantheman.com',
    py_modules=['app'],
    install_requires=requirements,
)
EOF
#+END_SRC

  Let's commit it to our local repo so we address it by version name.

#+BEGIN_SRC sh :tangle scripts/update_app.sh :results verbatim raw
cd greet-api
git add .
git ci -m 'Add name query param to greet endpoint'
git tag 1.1.0
#+END_SRC

  Let's build the app image again and call this image =greet-api:1.1.0=.

#+BEGIN_SRC sh :results verbatim raw
eval $(minikube docker-env) && docker build -t demo/greet-api:1.1.0 greet-api
#+END_SRC

#+RESULTS:

  It will now be present in the images.

#+BEGIN_SRC sh :results verbatim raw
eval $(minikube docker-env) && docker images
#+END_SRC

  We now need to update the deployment of the pods running our application.
  
#+BEGIN_SRC sh :results verbatim raw
kubectl rolling-update greet --image=demo/greet-api:1.1.0 
#+END_SRC

  After a bit, we will see the new pods deployed.  Let's retest the service at
  the exposed port, passing along a query parameter.

#+BEGIN_SRC sh :results verbatim raw
seq 1 10 | xargs -I{} curl -s $(minikube service greet-http --url)/\?name=kubenaut
#+END_SRC

  That was easy!

* Describe demo service deployments

  We have used the =kubectl= to manage deployment imperatively.  It is
  recommended to specify a deployment declaratively in terms of Kubernetes
  [[https://github.com/kubernetes/helm/blob/master/docs/charts.md][charts]].  These charts may be used by the =helm= command to manage deployment
  at a higher level.

  Helm has a =tiller-deploy= service that needs to be installed into the 
  cluster.

#+BEGIN_SRC sh :results verbatim raw
helm init
#+END_SRC

  If you check your deployment you will see a tiller-deploy pod in the 
  =kube=system= namespace.
 
#+BEGIN_SRC sh :results verbatim raw
cd greet-api && helm create .
#+END_SRC

  Check what was added.

#+BEGIN_SRC sh :results verbatim raw
cd greet-api && git status
#+END_SRC

  Open the =Chart.yaml= file in a text editor and set the =name= and =version=.

  Open the =values.yaml= file in a text editor and set the =image= =repository= 
  and =tag=.

  You can now deploy this with =helm=.

#+BEGIN_SRC sh :results verbatim raw
helm install greet-api
#+END_SRC

  Check your dashboard and see if you can notice any differences.

* Clean up
 
 We should clean up after ourselves.

#+NAME: clean_repo
#+BEGIN_SRC sh :tangle scripts/clean_repo.sh :results none
rm -rf greet-api scripts
rm -f *.html *.pdf *.tex *.tgz
#+END_SRC

 And with that, we're done.  I hope you learned something.  I know I did.

