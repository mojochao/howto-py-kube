#+TITLE: HOWTO Run Python in Kubernetes
#+AUTHOR: Allen Gooch
#+EMAIL: allen.gooch@gmail.com
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LANGUAGE: en

* Overview
  
 This document is a guide to running Python apps in a [[https://kubernetes.io/][Kubernetes]] environment.

 This guide is intended to demonstrate:
 - creating a local kubernetes cluster to deploy to
 - creating a demo web service to deploy to cluster
 - building the demo web service image
 - deploying the demo web service to cluster
 - scaling the deployment of the demo web service
 - updating the deployment of the demo web service
 - creating delarative deployment specifications for demo web service
 - managing deployments of the demo web service

 Note that this guide demonstrates on macOS, but is still valid for other  
 operating systemes, apart from the macOS tools installation instructions.

 Go ahead and open up a terminal window.  It's time to build something!

* Create local kubernetes cluster
  
 Note that [[https://brew.sh/][Homebrew]] is used for installing packages on macOS.  Ensure it is
 installed before proceeding.

 A [[https://www.docker.com/docker][Docker]] environment is used to run images in containers. Ensure it is 
 installed.

#+BEGIN_SRC sh :tangle scripts/bootstrap_kubes_macos.sh
which docker || brew cask install docker
#+END_SRC

 After install, Docker.app will be running and you will see the Docker Whale 
 icon in your Menu Bar.
  
 Check the docker command.

#+BEGIN_SRC sh :tangle scripts/bootstrap_kubes_macos.sh
docker version
#+END_SRC

 It is not required to have the Docker.app application running, as minikube
 will run the docker machine itself.  Feel free to quit Docker.app at any time.

 The [[https://kubernetes.io/docs/reference/kubectl/overview][kubectl]] command is used to manage the Kubernetes cluster at the lowest
 level.  Ensure it is installed.

#+BEGIN_SRC sh :tangle scripts/bootstrap_kubes_macos.sh
which kubectl || brew install kubectl
#+END_SRC

 Check the kubectl command.

#+BEGIN_SRC sh :tangle scripts/bootstrap_kubes_macos.sh
kubectl version
#+END_SRC

 The [[https://docs.helm.sh/helm][helm]] command is used to manage deployments to the Kubernetes cluster at a
 high level.  Ensure it is installed.

#+BEGIN_SRC sh :tangle scripts/bootstrap_kubes_macos.sh
which helm || brew install kubernetes-helm
#+END_SRC

 Check the helm command.

#+BEGIN_SRC sh :tangle scripts/bootstrap_kubes_macos.sh
helm version
#+END_SRC

 [[https://kubernetes.io/docs/getting-started-guides/minikube/][Minikube]] is used to provide the local Kubernetes cluster.  Ensure it is 
 installed.

#+BEGIN_SRC sh :tangle scripts/bootstrap_kubes_macos.sh
which minikube || brew cask install minikube
#+END_SRC

 Check the minikube command.

#+BEGIN_SRC sh :tangle scripts/bootstrap_kubes_macos.sh
minikube version
#+END_SRC

 Minikube needs a VM driver for the host OS.  On macOS, [[https://github.com/kubernetes/minikube/blob/master/docs/drivers.md#hyperkit-driver][hyperkit]] is the 
 recommended driver.  Install it next.

#+BEGIN_SRC sh :tangle scripts/bootstrap_kubes_macos.sh
curl -LO https://storage.googleapis.com/minikube/releases/latest/docker-machine-driver-hyperkit \
&& chmod +x docker-machine-driver-hyperkit \
&& sudo mv docker-machine-driver-hyperkit /usr/local/bin/ \
&& sudo chown root:wheel /usr/local/bin/docker-machine-driver-hyperkit \
&& sudo chmod u+s /usr/local/bin/docker-machine-driver-hyperkit
#+END_SRC

 If not using macOS, consult the [[https://github.com/kubernetes/minikube/blob/master/docs/drivers.md][driver plugin installation]] docs for options.

 Start a minikube cluster with the hyperkit vm driver on macOS.

#+BEGIN_SRC sh 
minikube start --vm-driver=hyperkit
#+END_SRC

 Query the cluster status.

#+BEGIN_SRC sh
minikube status
#+END_SRC

 Open the cluster dashboard.

#+BEGIN_SRC sh
minikube dashboard
#+END_SRC

 Leave the dashboard open so we can easily observe changes to the cluster.

 Congratulations!  You're the owner of a new local kubernetes cluster.

* Create the demo service

 We now need a workload to run on the cluster.

 Start by creating a directory for the demo web service.

#+BEGIN_SRC sh :tangle scripts/create_app.sh 
mkdir app
#+END_SRC

 Add the demo web service source code.

#+BEGIN_SRC sh :tangle scripts/create_app.sh 
cat <<EOF > app/app.py
import os
from bottle import route, run

@route('/')
def hello():
    return 'Hello World from {host}'.format(host=os.uname()[1])

if __name__ == '__main__':
    run(host='0.0.0.0', port=8080, debug=True)
EOF
#+END_SRC

#+RESULTS: create_app_py

 We also need a requirements file for the app.

#+BEGIN_SRC sh :tangle scripts/create_app.sh
cat <<EOF > app/requirements.txt
bottle
EOF
#+END_SRC

#+RESULTS: create_requirements_txt

 The last thing we need is a Dockerfile.

#+BEGIN_SRC sh :tangle scripts/create_app.sh 
cat <<EOF > app/Dockerfile
FROM python:3.6-alpine
EXPOSE 8080
COPY . /app
WORKDIR /app
RUN pip install -r requirements.txt
ENTRYPOINT ["python", "app.py"]
EOF
#+END_SRC

#+RESULTS: create_dockerfile

 Done!  That's all we need to provide the demo web service.

* Build the demo service
  
* Deploy the demo service

* Scale the demo service

* Update the demo service

* Describe demo service deployments

* Manage demo service deployments
* Clean up
 
 We should clean up after ourselves.

#+BEGIN_SRC sh :tangle scripts/cleanup.sh
rm -rf app
rm -rf scripts
rm -f *.html
rm -f *.pdf
rm -f *.tex
#+END_SRC

 And with that, we're done.  I hope you learned something.  I know I did.

